PEPAC, the PE PAcker Classifier. Version 1.2.1

  This program takes a number of PE binary files and runs many packer detection and classification techniques on them, including YARA rules, PEiD rules, hash lists, and ML classifiers. The results are outputted to screen and dumped to disk on .json form.

  This program is meant as a convenient way to compare the effectiveness of ML packer classifiers, but can also be used to detect and classify packing techniques in given binaries.

DISCLAIMER: 
  
  This is experimental pre-alpha software, given with no guarantees at all. It contains malware. Do not distribute in any form.

REQUIREMENTS:
  
  To run PEPAC you need to have Docker installed and running; see instructions at https://docs.docker.com/install/ .

  If you want to run Docker on Linux without sudo, you need to add your used to the docker group; see isntructions and consequences at https://docs.docker.com/install/linux/linux-postinstall/

INSTALLATION:

  Installation requires an Internet connection, and creates a docker image for pepac. Just run: 
    ./build.sh  

RUNNING:

  PEPAC automatically uses all YARA rules in the yara_rules/ folder, all PEiD rules in the peid_rules/ folder, all hash lists (in CSV format with each line being <sha256_hash>,<classification> ) in the hash_lists/ folder, and all the ML classifiers in the ml_classifiers/ folder. There are various ways to run PEPAC:

    ./run_pepac_tests.sh
    	This will run PEPAC on all files in the directory tests

    ./run_pepac.sh <FILE1> <FILE2> ...
    	This will run PEPAC on the files passed as argument. The files must be in the same directory as run_pepac.sh . (due to boring Docker restrictions, will be fixed in the future)

    docker run -t pepac python /pepac/bin/pepac.py
		This calls directly the PEPAC binary inside the Docker. The other two scripts are just wrappers around this. If run with -h it shows the full options:
usage: pepac.py [-h] [-y ADD_YARA_RULE] [-p ADD_PEID_SIGNATURE]
                [-l ADD_HASH_LIST] [-c ADD_CLASSIFIER] -o OUTPUT_FILE [-q]
                [-s step] [-i INPUT_FILE]
                [file_or_directory [file_or_directory ...]]

Welcome to the PEPAC, the PE PAcker Classifier. This is experimental software,
given with no guarantees at all to the extent of applicable law.

positional arguments:
  file_or_directory     Files or directory containing binary files to scan.

optional arguments:
  -h, --help            show this help message and exit
  -y ADD_YARA_RULE, --add-yara-rule ADD_YARA_RULE
                        Add the yara rules from the designated file as a new
                        set of rules/signature.
  -p ADD_PEID_SIGNATURE, --add-peid-signature ADD_PEID_SIGNATURE
                        Add the peid signature from the designatedfile as new
                        set of rules/signatures.
  -l ADD_HASH_LIST, --add-hash-list ADD_HASH_LIST
                        Add a list of file hashes and classifications
  -c ADD_CLASSIFIER, --add-classifier ADD_CLASSIFIER
                        Add a machine learning classifier
  -o OUTPUT_FILE, --output-file OUTPUT_FILE
                        File for storing the results. Will create 3 files
                        starting with the given prefix and storing ending with
                        packed, unpacked and unknown, containing the
                        corresponding binaries.
  -q, --quiet           Don't print output for each analyzed file
  -s step, --step step  Every how many steps to dump partial results
  -i INPUT_FILE, --input-file INPUT_FILE
                        Text file containing a list of files to analyze (one
                        per row).

RESULTS:

  The results for each file will be displayed on screen and saved in JSON format in the file results.json . When a ML classifier is able to provide different probabilities for different classes, these are displayed as percentages.

  In case more than 500 files are analyzed, partial results will be dumped every 500 files in a JSON file named results_<NUM_FILES>.json , where NUM_FILES is the number of files already analyzed. This can be modified with the -s option.
